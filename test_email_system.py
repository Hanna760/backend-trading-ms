#!/usr/bin/env python3
"""
Script de prueba para verificar el env√≠o de correos electr√≥nicos
"""

import asyncio
import os
from dotenv import load_dotenv
from src.app.application.services.email_service import EmailService

# Cargar variables de entorno
load_dotenv()

async def test_email_service():
    """Prueba el servicio de correo electr√≥nico"""
    
    # Verificar que las variables de entorno est√©n configuradas
    required_vars = ['MAIL_USERNAME', 'MAIL_PASSWORD', 'MAIL_FROM', 'MAIL_SERVER']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå Variables de entorno faltantes: {', '.join(missing_vars)}")
        print("Por favor configura las variables de entorno seg√∫n EMAIL_CONFIG.md")
        return False
    
    try:
        # Crear instancia del servicio de correo
        email_service = EmailService()
        
        # Datos de prueba
        test_email = os.getenv('MAIL_FROM')  # Enviar a nosotros mismos para prueba
        test_name = "Usuario de Prueba"
        test_order_type = "Compra"
        test_price = 1500.50
        test_order_id = 999
        
        print(f"üìß Enviando correo de prueba a: {test_email}")
        
        # Enviar correo de prueba
        success = await email_service.send_order_confirmation_email(
            user_email=test_email,
            user_name=test_name,
            order_type=test_order_type,
            price=test_price,
            order_id=test_order_id
        )
        
        if success:
            print("‚úÖ Correo enviado exitosamente!")
            print(f"   - Tipo de orden: {test_order_type}")
            print(f"   - Precio: ${test_price}")
            print(f"   - ID de orden: {test_order_id}")
            return True
        else:
            print("‚ùå Error al enviar el correo")
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {str(e)}")
        return False

def test_order_service_integration():
    """Prueba la integraci√≥n del servicio de √≥rdenes"""
    try:
        from src.app.application.services.order_service import OrderService
        from src.app.infrastructure.repositories.order_repository_impl import OrdenRepositoryImpl
        
        print("üîß Probando integraci√≥n del servicio de √≥rdenes...")
        
        # Crear servicio de √≥rdenes
        order_service = OrderService(OrdenRepositoryImpl())
        
        print("‚úÖ Servicio de √≥rdenes creado exitosamente")
        print("   - Integraci√≥n con EmailService: OK")
        print("   - Dependencias: OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en la integraci√≥n: {str(e)}")
        return False

async def main():
    """Funci√≥n principal de prueba"""
    print("üöÄ Iniciando pruebas del sistema de correos electr√≥nicos\n")
    
    # Prueba 1: Integraci√≥n del servicio
    print("1Ô∏è‚É£ Probando integraci√≥n del servicio...")
    integration_ok = test_order_service_integration()
    print()
    
    # Prueba 2: Env√≠o de correo
    print("2Ô∏è‚É£ Probando env√≠o de correo...")
    email_ok = await test_email_service()
    print()
    
    # Resumen
    print("üìä Resumen de pruebas:")
    print(f"   - Integraci√≥n: {'‚úÖ OK' if integration_ok else '‚ùå FALLO'}")
    print(f"   - Env√≠o de correo: {'‚úÖ OK' if email_ok else '‚ùå FALLO'}")
    
    if integration_ok and email_ok:
        print("\nüéâ ¬°Todas las pruebas pasaron! El sistema est√° listo para usar.")
    else:
        print("\n‚ö†Ô∏è  Algunas pruebas fallaron. Revisa la configuraci√≥n.")

if __name__ == "__main__":
    asyncio.run(main())
